/* CTF 1.8 */

typealias integer {size = 8;}  := uint8_t;
typealias integer {size = 16;} := uint16_t;
typealias integer {size = 32;} := uint32_t;

enum gc_phase : uint8_t {
    "compact/main" = 0,
    "compact/recompact",
    "explicit/gc_set",
    "explicit/gc_minor",
    "explicit/gc_major",
    "explicit/gc_full_major",
    "explicit/gc_compact",
    "major",
    "major/roots",
    "major/sweep",
    "major/mark_roots", /* FIXME: DANGER ZONE: see major_gc.h, this should be 10 */
    "major/mark_main",
    "major/mark_final", /* DANGER ZONE END: see major_gc.h, this should be 12 */
    "major_roots/global",
    "major_roots/local",
    "major_roots/C",
    "major_roots/finalised",
    "major_roots/memprof",
    "major_roots/hook",
    "major/check_and_compact",
    "minor",
    "minor/local_roots",
    "minor/ref_tables",
    "minor/copy",
    "minor/update_weak",
    "minor/finalized",
    "explicit/gc_major_slice"
};

enum gc_counter : uint8_t {
    "alloc_jump",
    "force_minor/alloc_small",
    "force_minor/make_vect",
    "force_minor/set_minor_heap_size",
    "force_minor/weak",
    "major/mark/slice/remain",
    "major/mark/slice/fields",
    "major/mark/slice/pointers",
    "major/work/extra",
    "major/work/mark",
    "major/work/sweep",
    "minor/promoted",
    "request_major/alloc_shr",
    "request_major/adjust_gc_speed",
    "request_minor/realloc_ref_table",
    "request_minor/realloc_ephe_ref_table",
    "request_minor/realloc_custom_table"
};

enum alloc_bucket : uint8_t {
  "alloc 01" = 1,
  "alloc 02",
  "alloc 03",
  "alloc 04",
  "alloc 05",
  "alloc 06",
  "alloc 07",
  "alloc 08",
  "alloc 09",
  "alloc 10-19",
  "alloc 20-29",
  "alloc 30-39",
  "alloc 40-49",
  "alloc 50-59",
  "alloc 60-69",
  "alloc 70-79",
  "alloc 80-89",
  "alloc 90-99",
  "alloc large"
};

trace {
    major = 1;
    minor = 8;
    byte_order = le;
    packet.header := struct {
        uint32_t magic;
        uint32_t stream_id;
    };
};

clock {
    name = tracing_clock;
    freq = 1000000000;
};

typealias integer {
    size = 64;
    map = clock.tracing_clock.value;
} := tracing_clock_int_t;

stream {
    id = 0;
    event.header := struct {
        uint32_t id;
        tracing_clock_int_t timestamp;
    };
};

event {
    id = 0;
    name = "entry";
    stream_id = 0;
    fields := struct {
        enum gc_phase phase; 
    };
};

event {
    id = 1;
    name = "exit";
    stream_id = 0;
    fields := struct {
        enum gc_phase phase;
    };
};

event {
    id = 2;
    name = "counter";
    stream_id = 0;
    fields := struct {
        enum gc_counter kind;
        uint32_t count;
    };
};

event {
    id = 3;
    name = "alloc";
    stream_id = 0;
    fields := struct {
        enum alloc_bucket bucket;
        uint32_t count;
    };
};
